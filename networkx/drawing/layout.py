#    Copyright (C) 2004-2017 by
#    Aric Hagberg <hagberg@lanl.gov>
#    Dan Schult <dschult@colgate.edu>
#    Pieter Swart <swart@lanl.gov>
#    Richard Penney <rwpenney@users.sourceforge.net>
#    Edouard Klein <rdklein.fr>
#    Kevin Dezaphi
#    All rights reserved.
#    BSD license.
#
# Authors: Aric Hagberg <aric.hagberg@gmail.com>,
#          Dan Schult <dschult@colgate.edu>
"""
******
Layout
******

Node positioning algorithms for graph drawing.

For `random_layout()` the possible resulting shape
is a square of side [0, scale] (default: [0, 1])
Changing `center` shifts the layout by that amount.

For the other layout routines, the extent is
[center - scale, center + scale] (default: [-1, 1]).

Warning: Most layout routines have only been tested in 2-dimensions.

"""
from __future__ import division
import networkx as nx

__all__ = ['circular_layout',
           'kamada_kawai_layout',
           'random_layout',
           'rescale_layout',
           'shell_layout',
           'spring_layout',
           'spectral_layout',
           'fruchterman_reingold_layout',
           'force_atlas_2_layout',
           'force_sim_until_no_displacement']


def _process_params(G, center, dim):
    # Some boilerplate code.
    import numpy as np

    if not isinstance(G, nx.Graph):
        empty_graph = nx.Graph()
        empty_graph.add_nodes_from(G)
        G = empty_graph

    if center is None:
        center = np.zeros(dim)
    else:
        center = np.asarray(center)

    if len(center) != dim:
        msg = "length of center coordinates must match dimension of layout"
        raise ValueError(msg)

    return G, center


def random_layout(G, center=None, dim=2):
    """Position nodes uniformly at random in the unit square.

    For every node, a position is generated by choosing each of dim
    coordinates uniformly at random on the interval [0.0, 1.0).

    NumPy (http://scipy.org) is required for this function.

    Parameters
    ----------
    G : NetworkX graph or list of nodes
        A position will be assigned to every node in G.

    center : array-like or None
        Coordinate pair around which to center the layout.

    dim : int
        Dimension of layout.

    Returns
    -------
    pos : dict
        A dictionary of positions keyed by node

    Examples
    --------
    >>> G = nx.lollipop_graph(4, 3)
    >>> pos = nx.random_layout(G)

    """
    import numpy as np

    G, center = _process_params(G, center, dim)
    shape = (len(G), dim)
    pos = np.random.random(shape) + center
    pos = pos.astype(np.float32)
    pos = dict(zip(G, pos))

    return pos


def circular_layout(G, scale=1, center=None, dim=2):
    # dim=2 only
    """Position nodes on a circle.

    Parameters
    ----------
    G : NetworkX graph or list of nodes
        A position will be assigned to every node in G.

    scale : number (default: 1)
        Scale factor for positions.

    center : array-like or None
        Coordinate pair around which to center the layout.

    dim : int
        Dimension of layout.
        If dim>2, the remaining dimensions are set to zero
        in the returned positions.

    Returns
    -------
    pos : dict
        A dictionary of positions keyed by node

    Examples
    --------
    >>> G = nx.path_graph(4)
    >>> pos = nx.circular_layout(G)

    Notes
    -----
    This algorithm currently only works in two dimensions and does not
    try to minimize edge crossings.

    """
    import numpy as np

    G, center = _process_params(G, center, dim)

    paddims = max(0, (dim - 2))

    if len(G) == 0:
        pos = {}
    elif len(G) == 1:
        pos = {nx.utils.arbitrary_element(G): center}
    else:
        # Discard the extra angle since it matches 0 radians.
        theta = np.linspace(0, 1, len(G) + 1)[:-1] * 2 * np.pi
        theta = theta.astype(np.float32)
        pos = np.column_stack([np.cos(theta), np.sin(theta),
                               np.zeros((len(G), paddims))])
        pos = rescale_layout(pos, scale=scale) + center
        pos = dict(zip(G, pos))

    return pos


def shell_layout(G, nlist=None, scale=1, center=None, dim=2):
    """Position nodes in concentric circles.

    Parameters
    ----------
    G : NetworkX graph or list of nodes
        A position will be assigned to every node in G.

    nlist : list of lists
       List of node lists for each shell.

    scale : number (default: 1)
        Scale factor for positions.

    center : array-like or None
        Coordinate pair around which to center the layout.

    dim : int
        Dimension of layout, currently only dim=2 is supported.

    Returns
    -------
    pos : dict
        A dictionary of positions keyed by node

    Examples
    --------
    >>> G = nx.path_graph(4)
    >>> shells = [[0], [1, 2, 3]]
    >>> pos = nx.shell_layout(G, shells)

    Notes
    -----
    This algorithm currently only works in two dimensions and does not
    try to minimize edge crossings.

    """
    import numpy as np

    G, center = _process_params(G, center, dim)

    if len(G) == 0:
        return {}
    if len(G) == 1:
        return {nx.utils.arbitrary_element(G): center}

    if nlist is None:
        # draw the whole graph in one shell
        nlist = [list(G)]

    if len(nlist[0]) == 1:
        # single node at center
        radius = 0.0
    else:
        # else start at r=1
        radius = 1.0

    npos = {}
    for nodes in nlist:
        # Discard the extra angle since it matches 0 radians.
        theta = np.linspace(0, 1, len(nodes) + 1)[:-1] * 2 * np.pi
        theta = theta.astype(np.float32)
        pos = np.column_stack([np.cos(theta), np.sin(theta)])
        pos = rescale_layout(pos, scale=scale * radius / len(nlist)) + center
        npos.update(zip(nodes, pos))
        radius += 1.0

    return npos


def fruchterman_reingold_layout(G, k=None,
                                pos=None,
                                fixed=None,
                                iterations=0,
                                weight='weight',
                                scale=1,
                                center=None,
                                dim=2,
                                displacement_min=1,
                                distance=None):
    """Position nodes using Fruchterman-Reingold force-directed algorithm.

    Parameters
    ----------
    G : NetworkX graph or list of nodes
        A position will be assigned to every node in G.

    k : float (default=None)
        Optimal distance between nodes.  If None the distance is set to
        1/sqrt(n) where n is the number of nodes.  Increase this value
        to move nodes farther apart.

    pos : dict or None  optional (default=None)
        Initial positions for nodes as a dictionary with node as keys
        and values as a coordinate list or tuple.  If None, then use
        random initial positions.

    fixed : list or None  optional (default=None)
        Nodes to keep fixed at initial position.

    iterations : int  optional (default=0)
        Number of maximum iterations. The algorithm stops when the
        maximum displacement is under displacement_min or when the
        number of iterations is reached. If it is 0, then there is no
        limit on the number of iterations. The algorithm is guaranteed
        to converge if displacement_min>0.

    weight : string or None   optional (default='weight')
        The edge attribute that holds the numerical value used for
        the edge weight.  If None, then all edge weights are 1.

    scale : number (default: 1)
        Scale factor for positions. The nodes are positioned
        in a box of size [0, scale] x [0, scale].
        Not used unless `fixed is None`.

    center : array-like or None
        Coordinate pair around which to center the layout.
        Not used unless `fixed is None`.

    dim : int  optional (default=2)
        Dimension of layout

    displacement_min : float  optional (default=1)
        The algorithm stops if an iteration would make the node that moves the
        most move less than displacement_min.
        The default of one pixel makes a lot of sense. Values < 1 will lead to
        much slower convergence.

    distance : function  optional (default=None)
        Function that take an n x n x dim array of deltas between
        coordinates and return the n x n array of the scalar distances
        corresponding to those deltas.
        Defaults to lambda x: np.linalg.norm(x, axis=-1) if None.

    Returns
    -------
    pos : dict
        A dictionary of positions keyed by node

    Examples
    --------
    >>> G = nx.path_graph(4)
    >>> pos = nx.spring_layout(G)

    # The same using longer but equivalent function name
    >>> pos = nx.fruchterman_reingold_layout(G)

    See also
    --------
    force_atlas_2_layout
    force_sim_until_no_displacement
    """
    import numpy as np

    G, center = _process_params(G, center, dim)

    if len(G) == 0:
        return {}
    if len(G) == 1:
        return {nx.utils.arbitrary_element(G.nodes()): center}

    W = np.asarray(nx.to_numpy_matrix(G, weight=weight))
    A = np.where(W, 1, 0)
    nnodes, _ = A.shape

    if k is None:
        if fixed is not None:
            dom_size = max(coord for pos_tup in pos.values()
                           for coord in pos_tup)
            dom_size = .1 if dom_size < .1 else dom_size
            # We must adjust k by domain size for layouts not near 1x1
            k = dom_size / np.sqrt(nnodes)
        else:
            k = np.sqrt(1.0/nnodes)

    def fruchterman_reingold(Dis, Delta_unit, Pos, _):
        """Return the n x dim displacement vector for Fruchterman Reingold.

        The forces are computed according to the paper

        Thomas M. J. Fruchterman AND Edward M. Reingold (1991)
        Graph Drawing by Force-directed Placement

        Parameters
        ----------
        Dis : n x n array-like
            Dis[i, j] is the scalar distance between i and j

        Delta_unit : n x n x dim array-like
            Delta_unit[i, j] is the unit vector pointing from i to j

        Pos : n x dim array-like
            Pos[i] is the position of node i

        _ : Some algos (e.g. Force Atlas 2) need to know the distance
            function, we dont.
        """
        f_rep = (k * k / Dis**2).reshape((nnodes, nnodes, 1)) * Delta_unit

        f_att = (W * Dis / k).reshape((nnodes, nnodes, 1)) * Delta_unit

        return np.sum(f_att - f_rep, axis=1)

    pos = nx.force_sim_until_no_displacement(G, fruchterman_reingold, pos,
                                             fixed,
                                             iterations, scale, center, dim,
                                             displacement_min, distance)

    pos = dict(zip(G, pos))
    return pos


spring_layout = fruchterman_reingold_layout


def force_atlas_2_layout(G, k=None,
                         pos=None,
                         fixed=None,
                         iterations=0,
                         weight='weight',
                         scale=1.0,
                         center=None,
                         dim=2,
                         g=0,
                         edge_weight_influence=1,
                         log_attraction=False,
                         dissuade_hubs=False,
                         displacement_min=1,
                         distance=None):
    """Position nodes using the Force Atlas 2 force-directed algorithm.

    Parameters
    ----------
    G : NetworkX graph or list of nodes

    k : float  optional (default=None)
        Scalar to adjust repulsion force. If None it is set to 10 under
        100 nodes else 2. The higher it is, the stronger the repulsion is.

    pos : dict or None  optional (default=None)
        Initial positions for nodes as a dictionary with node as keys
        and values as a coordinate list or tuple.  If None, then use
        random initial positions.

    fixed : list or None  optional (default=None)
        Nodes to keep fixed at initial position.

    iterations : int  optional (default=0)
        Number of maximum iterations. The algorithm stops when the
        maximum displacement is under displacement_min or when the
        number of iterations is reached. If it is 0, then there is no
        limit on the number of iterations. The algorithm is guaranteed
        to converge if displacement_min>0.

    weight : string or None   optional (default='weight')
        The edge attribute that holds the numerical value used for
        the edge weight.  If None, then all edge weights are 1.

    scale : float  optional (default=1.0)
        Scale factor for positions. The nodes are positioned
        in a box of size [0, scale] x [0, scale], unless some nodes are fixed.

    center : array-like or None  optional
        Coordinate pair around which to center the layout.

    dim : int  optional (default=2)
        Dimension of layout

    g : float  optional (default=0)
        Scalar to adjust "gravity" force. The higher it is, the more nodes
        are attracted to the center. "Gravity" is a linear function of
        distance power by g.

    edge_weight_influence : float  optional (default=1)
        If the edges are weighted (edges must have a 'weight' attribute),
        attraction is a linear function of distance multiplied by the weight
        to the power of edge_weight_influence (unless log_attraction is True).

    log_attraction : boolean  optional (default=False)
        Use logarithm attraction force instead of proportionnal.

    dissuade_hubs : boolean  optional (default=False)
        Divide the attraction by the number of outgoing links plus one.

    displacement_min : float  optional (default=1)
        The algorithm stops if an iteration would make the node that moves the
        most move less than displacement_min.
        The default of one pixel makes a lot of sense. Values < 1 will lead to
        much slower convergence.

    distance : function  optional (default=None)
        Function that take an _ x dim array of deltas between
        coordinates and return the _ array of the scalar distances
        corresponding to those deltas.
        Defaults to lambda x: np.linalg.norm(x, axis=-1) if None.

    Returns
    -------
    pos : dict
        A dictionary of positions keyed by node

    Examples
    --------
    >>> G = nx.path_graph(4)
    >>> pos = nx.force_atlas_2_layout(G)

    See also
    --------
    fruchterman_reingold_layout
    force_sim_until_no_displacement  # FIXME: Changer les noms des fonctions
    """
    import numpy as np

    G, center = _process_params(G, center, dim)

    W = np.asarray(nx.to_numpy_matrix(G, weight=weight))**edge_weight_influence
    A = np.where(W, 1, 0)
    nnodes, _ = A.shape

    if nnodes == 0:
        return {}

    if not k:
        # Default values inspired from Force Atlas 2 Java implementation
        k = 2 if nnodes > 100 else 10

    if len(G) > 5000:
        raise NotImplementedError("Sparse matrix Force Atlas 2 is not "
                                  "implemented yet")

    ones = np.ones((nnodes, 1))

    # ∀ x, Hub[i, x] is 1 + the number of outgoing edges from node i
    Hub = np.matmul((1 + np.sum(A, axis=1)).reshape((nnodes, 1)), ones.T)
    # Hub times 1 + the number of incoming edges is used as the degree in
    # Force Atlas 2. It has the nice property of never being 0.
    Deg = Hub * np.matmul(ones, (1 + np.sum(A, axis=0)).reshape((1, nnodes)))

    def force_atlas_2(Dis, Delta_unit, Pos, distance=None):
        """Return the n x dim displacement vector for Force Atlas 2.

        The forces are computed according to the paper

        Jacomy, M., Venturini, T., Heymann, S., & Bastian, M. (2014).
        ForceAtlas2, a continuous graph layout algorithm for handy network
        visualization designed for the Gephi software.

        Parameters
        ----------
        Dis : n x n array-like
            Dis[i, j] is the scalar distance between i and j

        Delta_unit : n x n x dim array-like
            Delta_unit[i, j] is the unit vector pointing from i to j

        Pos : n x dim array-like
            Pos[i] is the position of node i

        distance : function  optional (default=None)
            Function that take an _ x dim array of deltas between
            coordinates and return the _ array of the scalar distances
            corresponding to those deltas.
            Defaults to lambda x: np.linalg.norm(x, axis=-1) if None.
        """
        if distance is None:
            Dis_center = np.linalg.norm(Pos, axis=-1)
        else:
            Dis_center = distance(Pos)
        Dis_center = np.where(Dis_center < 0.01, 0.01, Dis_center)
        f_gra = Hub[0] * Dis_center**g
        f_gra = f_gra.reshape(nnodes, 1) * Pos / Dis_center.reshape(nnodes, 1)

        f_rep = k * Deg / Dis
        f_rep = f_rep.reshape(nnodes, nnodes, 1) * Delta_unit

        if log_attraction:
            f_att = np.log(Dis) * W
        else:
            f_att = Dis * W
        if dissuade_hubs:
            f_att /= Hub
        f_att = f_att.reshape((nnodes, nnodes, 1)) * Delta_unit

        return np.sum(f_att - f_rep, axis=1) - f_gra

    Pos = nx.force_sim_until_no_displacement(G, force_atlas_2, pos, fixed,
                                             iterations, scale,
                                             center, dim, displacement_min)
    pos = dict(zip(G, Pos))
    return pos


def force_sim_until_no_displacement(G, get_displacement,
                                    pos=None,
                                    fixed=None,
                                    iterations=0,
                                    scale=1.0,
                                    center=None,
                                    dim=2,
                                    displacement_min=1,
                                    distance=None):
    """Run a force-directed algorithm on G, using the given set of forces.

    G : NetworkX graph or list of nodes

    get_displacement : function of Dis, Delta_unit, Pos, distance, where:
        - Dis is a n x n array-like, Dis[i, j] is the scalar distance
          between node i and node j,
        - Delta_unit: n x n x dim array-like, Delta_unit[i, j] is the unit vector
          pointing from i to j,
        - Pos: n x dim array-like, Pos[i] is the position of i,
        - distance: function  that take an _ x dim array of deltas between
            coordinates and return the _ array of the scalar distances
            corresponding to those deltas.

        get_displacement computes the displacement for one iteration from
        its arguments by computing and summing the forces. See for example
        :py:func:`networkx.layout.force_atlas_2_layout.force_atlas2` or
        :py:func:`networkx.layout.fruchterman_reingold_layout.fruchterman_reingold`.

    pos : dict or None  optional (default=None)
        Initial positions for nodes as a dictionary with node as keys
        and values as a coordinate list or tuple.  If None, then use
        random initial positions.

    fixed : list or None  optional (default=None)
        Nodes to keep fixed at initial position.

    iterations : int  optional (default=0)
        Number of maximum iterations. The algorithm stops when the
        maximum displacement is under displacement_min or when the
        number of iterations is reached. If it is 0, then there is no
        limit on the number of iterations. The algorithm is guaranteed
        to converge if displacement_min>0.

    scale : float  optional (default=1.0)
        Scale factor for positions. The nodes are positioned
        in a box of size [0, scale] x [0, scale].

    center : array-like or None  optional
        Coordinate pair around which to center the layout.

    dim : int  optional (default=2)
        Dimension of layout

    displacement_min : float  optional (default=1)
        The algorithm stops if an iteration would make the node that moves the
        most move less than displacement_min.
        The default of one pixel makes a lot of sense. Values < 1 will lead to
        much slower convergence.

    distance : function  optional (default=None)
        Function that take an n x n x dim array of deltas between
        coordinates and return the n x n array of the scalar distances
        corresponding to those deltas.
        Defaults to lambda x: np.linalg.norm(x, axis=-1) if None.

    Returns
    -------
    pos : n x dim array-like
        An array of positions of nodes.

    See also
    --------
    force_atlas_2_layout
    fruchterman_reingold_layout
    """
    try:
        import numpy as np
    except ImportError:
        msg = """force_sim_until_no_displacement() requires numpy"""
        raise ImportError(msg)

    G, center = _process_params(G, center, dim)

    if iterations == 0:
        iterations = np.inf

    nnodes = len(G)

    shape = (nnodes, dim)
    if pos:
        # Determine size of existing domain to adjust initial positions
        dom_size = max(coord for pos_tup in pos.values() for coord in pos_tup)
        Pos = np.random.random(shape) * dom_size + center
        for i, n in enumerate(G):
            if n in pos:
                Pos[i] = np.asarray(pos[n])
    else:
        Pos = np.random.random(shape) + center

    if nnodes == 0:
        return None
    if nnodes == 1:
        return [center]

    if distance is None:
        def distance(x):
            '''Take an n x n x dim array of deltas between
            coordinates and return the n x n array of the scalar distances
            corresponding to those deltas.'''
            return np.linalg.norm(x, axis=-1)

    def deltas(Pos):
        '''Return the n x n array Delta of dim-dimensional vectors between nodes.

        Delta[i, j, k] is the delta along dimension k between nodes i and j,
        therefore:
        - Delta[i, j k] == - Delta[j, i, k],
        - Pos[i] + Delta[i, j] == Pos[j]
        - and distance bewteen i and j is distance(Delta[i, j,:])

        Parameters
        -----------
        Pos: n x dim array-like
            The nodes' positions

        Returns
        --------
        The n x n x dim delta array.
        '''
        p1_pn_in_lines = np.tensordot(ones, Pos.reshape(1, nnodes, dim), 1)
        assert p1_pn_in_lines.shape == (nnodes, nnodes, dim),\
            """p1_pn_in_lines is supposed to be the matrix whose lines are
            Pos, transposed a way that leaves its dim-dimensional elements
            (the nodes positions) untouched"""
        # By substracting its transpose to it, we compute the deltas
        return p1_pn_in_lines - p1_pn_in_lines.transpose(1, 0, 2)

    ones = np.ones((nnodes, 1))

    M = np.array([[1] if not fixed or node not in fixed else [0]
                  for node in G])

    Pos_changed = True  # We only recompute deltaa nd Q if the positions changed
    Q = np.inf
    alpha = 1
    i = 0
    while i < iterations:
        i += 1
        if Pos_changed:
            Delta = deltas(Pos)
            Dis = distance(Delta)
            Dis = np.where(Dis < 0.01, 0.01, Dis)
            Delta_unit = Delta / Dis.reshape((nnodes, nnodes, 1))
            delta = get_displacement(Dis, Delta_unit, Pos, distance) * M
            Pos_changed = False
        Pos_2 = Pos + delta * alpha
        Delta_2 = deltas(Pos_2)
        Dis_2 = distance(Delta_2)
        Dis_2 = np.where(Dis_2 < 0.01, 0.01, Dis_2)
        Delta_unit_2 = Delta_2 / Dis_2.reshape((nnodes, nnodes, 1))
        delta_2 = get_displacement(Dis_2, Delta_unit_2, Pos_2, distance) * M
        Q_2 = np.linalg.norm(delta_2)
        if Q != np.inf:
            alpha = alpha * Q / Q_2
        if Q_2 < Q:
            Q = Q_2
            Pos = Pos_2
            Pos_changed = True
        else:
            alpha /= 2
        if max(map(np.max, map(np.abs, delta * alpha))) <= displacement_min:
            break
    if fixed is None:
        Pos = nx.rescale_layout(Pos, scale=scale) + center
    return Pos


def kamada_kawai_layout(G, dist=None,
                        pos=None,
                        weight='weight',
                        scale=1,
                        center=None,
                        dim=2):
    """Position nodes using Kamada-Kawai path-length cost-function.

    Parameters
    ----------
    G : NetworkX graph or list of nodes
        A position will be assigned to every node in G.

    dist : float (default=None)
        A two-level dictionary of optimal distances between nodes,
        indexed by source and destination node.
        If None, the distance is computed using shortest_path_length().

    pos : dict or None  optional (default=None)
        Initial positions for nodes as a dictionary with node as keys
        and values as a coordinate list or tuple.  If None, then use
        circular_layout().

    weight : string or None   optional (default='weight')
        The edge attribute that holds the numerical value used for
        the edge weight.  If None, then all edge weights are 1.

    scale : number (default: 1)
        Scale factor for positions.

    center : array-like or None
        Coordinate pair around which to center the layout.

    dim : int
        Dimension of layout.

    Returns
    -------
    pos : dict
        A dictionary of positions keyed by node

    Examples
    --------
    >>> G = nx.path_graph(4)
    >>> pos = nx.kamada_kawai_layout(G)
    """
    try:
        import numpy as np
    except ImportError:
        msg = 'Kamada-Kawai layout requires numpy: http://scipy.org'
        raise ImportError(msg)

    G, center = _process_params(G, center, dim)
    nNodes = len(G)

    if dist is None:
        dist = dict(nx.shortest_path_length(G, weight=weight))
    dist_mtx = 1e6 * np.ones((nNodes, nNodes))
    for row, nr in enumerate(G):
        if nr not in dist:
            continue
        rdist = dist[nr]
        for col, nc in enumerate(G):
            if nc not in rdist:
                continue
            dist_mtx[row][col] = rdist[nc]

    if pos is None:
        pos = circular_layout(G, dim=dim)
    pos_arr = np.array([pos[n] for n in G])

    pos = _kamada_kawai_solve(dist_mtx, pos_arr, dim)

    pos = rescale_layout(pos, scale=scale) + center
    return dict(zip(G, pos))


def _kamada_kawai_solve(dist_mtx, pos_arr, dim):
    # Anneal node locations based on the Kamada-Kawai cost-function,
    # using the supplied matrix of preferred inter-node distances,
    # and starting locations.

    import numpy as np
    try:
        from scipy.optimize import minimize
    except ImportError:
        msg = 'Kamada-Kawai layout requires scipy: http://scipy.org'
        raise ImportError(msg)

    meanwt = 1e-3
    costargs = (np, 1 / (dist_mtx + np.eye(dist_mtx.shape[0]) * 1e-3),
                meanwt, dim)

    optresult = minimize(_kamada_kawai_costfn, pos_arr.ravel(),
                         method='L-BFGS-B', args=costargs, jac=True)

    return optresult.x.reshape((-1, dim))


def _kamada_kawai_costfn(pos_vec, np, invdist, meanweight, dim):
    # Cost-function and gradient for Kamada-Kawai layout algorithm
    nNodes = invdist.shape[0]
    pos_arr = pos_vec.reshape((nNodes, dim))

    delta = pos_arr[:, np.newaxis, :] - pos_arr[np.newaxis, :, :]
    nodesep = np.linalg.norm(delta, axis=-1)
    direction = np.einsum('ijk,ij->ijk',
                          delta,
                          1 / (nodesep + np.eye(nNodes) * 1e-3))

    offset = nodesep * invdist - 1.0
    offset[np.diag_indices(nNodes)] = 0

    cost = 0.5 * np.sum(offset ** 2)
    grad = (np.einsum('ij,ij,ijk->ik', invdist, offset, direction) -
            np.einsum('ij,ij,ijk->jk', invdist, offset, direction))

    # Additional parabolic term to encourage mean position to be near origin:
    sumpos = np.sum(pos_arr, axis=0)
    cost += 0.5 * meanweight * np.sum(sumpos ** 2)
    grad += meanweight * sumpos

    return (cost, grad.ravel())


def spectral_layout(G, weight='weight', scale=1, center=None, dim=2):
    """Position nodes using the eigenvectors of the graph Laplacian.

    Parameters
    ----------
    G : NetworkX graph or list of nodes

    weight : string or None   optional (default='weight')
        The edge attribute that holds the numerical value used for
        the edge weight.  If None, then all edge weights are 1.

    scale : float
        Scale factor for positions

    center : array-like or None
        Coordinate pair around which to center the layout.

    dim : int
        Dimension of layout

    Returns
    -------
    pos : dict
        A dictionary of positions keyed by node

    Examples
    --------
    >>> G = nx.path_graph(4)
    >>> pos = nx.spectral_layout(G)

    Notes
    -----
    Directed graphs will be considered as undirected graphs when
    positioning the nodes.

    For larger graphs (>500 nodes) this will use the SciPy sparse
    eigenvalue solver (ARPACK).
    """
    # handle some special cases that break the eigensolvers
    import numpy as np

    G, center = _process_params(G, center, dim)

    if len(G) <= 2:
        if len(G) == 0:
            pos = np.array([])
        elif len(G) == 1:
            pos = np.array([center])
        else:
            pos = np.array([np.zeros(dim), np.array(center)*2.0])
        return dict(zip(G, pos))
    try:
        # Sparse matrix
        if len(G) < 500:  # dense solver is faster for small graphs
            raise ValueError
        A = nx.to_scipy_sparse_matrix(G, weight=weight, dtype='d')
        # Symmetrize directed graphs
        if G.is_directed():
            A = A + np.transpose(A)
        pos = _sparse_spectral(A, dim)
    except (ImportError, ValueError):
        # Dense matrix
        A = nx.to_numpy_matrix(G, weight=weight)
        # Symmetrize directed graphs
        if G.is_directed():
            A = A + np.transpose(A)
        pos = _spectral(A, dim)

    pos = rescale_layout(pos, scale) + center
    pos = dict(zip(G, pos))
    return pos


def _spectral(A, dim=2):
    # Input adjacency matrix A
    # Uses dense eigenvalue solver from numpy
    try:
        import numpy as np
    except ImportError:
        msg = "spectral_layout() requires numpy: http://scipy.org/ "
        raise ImportError(msg)
    try:
        nnodes, _ = A.shape
    except AttributeError:
        msg = "spectral() takes an adjacency matrix as input"
        raise nx.NetworkXError(msg)

    # form Laplacian matrix
    # make sure we have an array instead of a matrix
    A = np.asarray(A)
    I = np.identity(nnodes, dtype=A.dtype)
    D = I * np.sum(A, axis=1)  # diagonal of degrees
    L = D - A

    eigenvalues, eigenvectors = np.linalg.eig(L)
    # sort and keep smallest nonzero
    index = np.argsort(eigenvalues)[1:dim + 1]  # 0 index is zero eigenvalue
    return np.real(eigenvectors[:, index])


def _sparse_spectral(A, dim=2):
    # Input adjacency matrix A
    # Uses sparse eigenvalue solver from scipy
    # Could use multilevel methods here, see Koren "On spectral graph drawing"
    try:
        import numpy as np
        from scipy.sparse import spdiags
        from scipy.sparse.linalg.eigen import eigsh
    except ImportError:
        msg = "_sparse_spectral() requires scipy & numpy: http://scipy.org/ "
        raise ImportError(msg)
    try:
        nnodes, _ = A.shape
    except AttributeError:
        msg = "sparse_spectral() takes an adjacency matrix as input"
        raise nx.NetworkXError(msg)

    # form Laplacian matrix
    data = np.asarray(A.sum(axis=1).T)
    D = spdiags(data, 0, nnodes, nnodes)
    L = D - A

    k = dim + 1
    # number of Lanczos vectors for ARPACK solver.What is the right scaling?
    ncv = max(2 * k + 1, int(np.sqrt(nnodes)))
    # return smallest k eigenvalues and eigenvectors
    eigenvalues, eigenvectors = eigsh(L, k, which='SM', ncv=ncv)
    index = np.argsort(eigenvalues)[1:k]  # 0 index is zero eigenvalue
    return np.real(eigenvectors[:, index])


def rescale_layout(pos, scale=1):
    """Return scaled position array to (-scale, scale) in all axes.

    The function acts on NumPy arrays which hold position information.
    Each position is one row of the array. The dimension of the space
    equals the number of columns. Each coordinate in one column.

    To rescale, the mean (center) is subtracted from each axis separately.
    Then all values are scaled so that the largest magnitude value
    from all axes equals `scale` (thus, the aspect ratio is preserved).
    The resulting NumPy Array is returned (order of rows unchanged).

    Parameters
    ----------
    pos : numpy array
        positions to be scaled. Each row is a position.

    scale : number (default: 1)
        The size of the resulting extent in all directions.

    Returns
    -------
    pos : numpy array
        scaled positions. Each row is a position.

    """
    # Find max length over all dimensions
    lim = 0  # max coordinate for all axes
    for i in range(pos.shape[1]):
        pos[:, i] -= pos[:, i].mean()
        lim = max(abs(pos[:, i]).max(), lim)
    # rescale to (-scale, scale) in all directions, preserves aspect
    if lim > 0:
        for i in range(pos.shape[1]):
            pos[:, i] *= scale / lim
    return pos


# fixture for nose tests
def setup_module(module):
    from nose import SkipTest
    try:
        import numpy
    except:
        raise SkipTest("NumPy not available")
    try:
        import scipy
    except:
        raise SkipTest("SciPy not available")
